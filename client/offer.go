// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": offer Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"time"
)

// AcceptOfferPayload is the offer accept action payload.
type AcceptOfferPayload struct {
	// offer ID
	OfferID int `form:"offer_id" json:"offer_id" xml:"offer_id"`
	// owner ID
	OwnerID int `form:"owner_id" json:"owner_id" xml:"owner_id"`
}

// AcceptOfferPath computes a request path to the accept action of offer.
func AcceptOfferPath() string {

	return fmt.Sprintf("/offers")
}

// accepted offer
func (c *Client) AcceptOffer(ctx context.Context, path string, payload *AcceptOfferPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAcceptOfferRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAcceptOfferRequest create the request corresponding to the accept action endpoint of the offer resource.
func (c *Client) NewAcceptOfferRequest(ctx context.Context, path string, payload *AcceptOfferPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// CreateOfferPayload is the offer create action payload.
type CreateOfferPayload struct {
	// rental end at
	EndAt time.Time `form:"end_at" json:"end_at" xml:"end_at"`
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// offer price
	Price int `form:"price" json:"price" xml:"price"`
	// rental start at
	StartAt time.Time `form:"start_at" json:"start_at" xml:"start_at"`
	// offer user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// CreateOfferPath computes a request path to the create action of offer.
func CreateOfferPath() string {

	return fmt.Sprintf("/offers")
}

// Create new offer
func (c *Client) CreateOffer(ctx context.Context, path string, payload *CreateOfferPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateOfferRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateOfferRequest create the request corresponding to the create action endpoint of the offer resource.
func (c *Client) NewCreateOfferRequest(ctx context.Context, path string, payload *CreateOfferPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListOfferPayload is the offer list action payload.
type ListOfferPayload struct {
	// item ID
	ItemID *int `form:"item_id,omitempty" json:"item_id,omitempty" xml:"item_id,omitempty"`
	// owner ID
	OwnerID *int `form:"owner_id,omitempty" json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// ListOfferPath computes a request path to the list action of offer.
func ListOfferPath() string {

	return fmt.Sprintf("/offers")
}

// Retrieve all offers.
func (c *Client) ListOffer(ctx context.Context, path string, payload *ListOfferPayload, contentType string) (*http.Response, error) {
	req, err := c.NewListOfferRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListOfferRequest create the request corresponding to the list action endpoint of the offer resource.
func (c *Client) NewListOfferRequest(ctx context.Context, path string, payload *ListOfferPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
