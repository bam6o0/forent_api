// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": offer Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// CreateOfferPayload is the offer create action payload.
type CreateOfferPayload struct {
	// rental end at
	EndAt time.Time `form:"end_at" json:"end_at" xml:"end_at"`
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// item id
	OwnerID *int `form:"owner_id,omitempty" json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// offer price
	Price int `form:"price" json:"price" xml:"price"`
	// rental start at
	StartAt time.Time `form:"start_at" json:"start_at" xml:"start_at"`
	// offer user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// CreateOfferPath computes a request path to the create action of offer.
func CreateOfferPath() string {

	return fmt.Sprintf("/offers")
}

// Create new offer
func (c *Client) CreateOffer(ctx context.Context, path string, payload *CreateOfferPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateOfferRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateOfferRequest create the request corresponding to the create action endpoint of the offer resource.
func (c *Client) NewCreateOfferRequest(ctx context.Context, path string, payload *CreateOfferPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowOfferPath computes a request path to the show action of offer.
func ShowOfferPath(ownerID int) string {
	param0 := strconv.Itoa(ownerID)

	return fmt.Sprintf("/offers/%s", param0)
}

// Get owner by id
func (c *Client) ShowOffer(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowOfferRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowOfferRequest create the request corresponding to the show action endpoint of the offer resource.
func (c *Client) NewShowOfferRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
