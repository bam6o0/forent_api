// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": middlecategory Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ListMiddlecategoryPayload is the middlecategory list action payload.
type ListMiddlecategoryPayload struct {
	// largecategory id
	LargecategoryID *int `form:"largecategoryID,omitempty" json:"largecategoryID,omitempty" xml:"largecategoryID,omitempty"`
}

// ListMiddlecategoryPath computes a request path to the list action of middlecategory.
func ListMiddlecategoryPath() string {

	return fmt.Sprintf("/middlecategories")
}

// Retrieve all middlecategories.
func (c *Client) ListMiddlecategory(ctx context.Context, path string, payload *ListMiddlecategoryPayload, contentType string) (*http.Response, error) {
	req, err := c.NewListMiddlecategoryRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListMiddlecategoryRequest create the request corresponding to the list action endpoint of the middlecategory resource.
func (c *Client) NewListMiddlecategoryRequest(ctx context.Context, path string, payload *ListMiddlecategoryPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
