// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": category Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListCategoryPath computes a request path to the list action of category.
func ListCategoryPath() string {

	return fmt.Sprintf("/categories")
}

// Retrieve all categories.
func (c *Client) ListCategory(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCategoryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCategoryRequest create the request corresponding to the list action endpoint of the category resource.
func (c *Client) NewListCategoryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowCategoryPath computes a request path to the show action of category.
func ShowCategoryPath(categoryID int) string {
	param0 := strconv.Itoa(categoryID)

	return fmt.Sprintf("/categories/%s", param0)
}

// Get category by id
func (c *Client) ShowCategory(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCategoryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCategoryRequest create the request corresponding to the show action endpoint of the category resource.
func (c *Client) NewShowCategoryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
