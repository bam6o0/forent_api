// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": category Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AllCategoryPath computes a request path to the all action of category.
func AllCategoryPath() string {

	return fmt.Sprintf("/categories")
}

// Retrieve all categories.
func (c *Client) AllCategory(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAllCategoryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAllCategoryRequest create the request corresponding to the all action endpoint of the category resource.
func (c *Client) NewAllCategoryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCategoryPayload is the category list action payload.
type ListCategoryPayload struct {
	// middlecategory id
	MiddlecategoryID *int `form:"middlecategoryID,omitempty" json:"middlecategoryID,omitempty" xml:"middlecategoryID,omitempty"`
}

// ListCategoryPath computes a request path to the list action of category.
func ListCategoryPath(middlecategoryID string) string {
	param0 := middlecategoryID

	return fmt.Sprintf("/categories/%s", param0)
}

// Retrieve all categories.
func (c *Client) ListCategory(ctx context.Context, path string, payload *ListCategoryPayload, contentType string) (*http.Response, error) {
	req, err := c.NewListCategoryRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCategoryRequest create the request corresponding to the list action endpoint of the category resource.
func (c *Client) NewListCategoryRequest(ctx context.Context, path string, payload *ListCategoryPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
