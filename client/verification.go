// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": verification Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateVerificationPayload is the verification create action payload.
type CreateVerificationPayload struct {
	// address flag
	Email bool `form:"email" json:"email" xml:"email"`
	// Unique facebook ID
	FacebookID int `form:"facebook_id" json:"facebook_id" xml:"facebook_id"`
	// Unique google ID
	GoogleID int `form:"google_id" json:"google_id" xml:"google_id"`
	// identification flag
	Identification bool `form:"identification" json:"identification" xml:"identification"`
}

// CreateVerificationPath computes a request path to the create action of verification.
func CreateVerificationPath() string {

	return fmt.Sprintf("/v1/verifications")
}

// Create new verification
func (c *Client) CreateVerification(ctx context.Context, path string, payload *CreateVerificationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateVerificationRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateVerificationRequest create the request corresponding to the create action endpoint of the verification resource.
func (c *Client) NewCreateVerificationRequest(ctx context.Context, path string, payload *CreateVerificationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowVerificationPayload is the verification show action payload.
type ShowVerificationPayload struct {
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// ShowVerificationPath computes a request path to the show action of verification.
func ShowVerificationPath() string {

	return fmt.Sprintf("/v1/verifications")
}

// Get verification by id
func (c *Client) ShowVerification(ctx context.Context, path string, payload *ShowVerificationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewShowVerificationRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowVerificationRequest create the request corresponding to the show action endpoint of the verification resource.
func (c *Client) NewShowVerificationRequest(ctx context.Context, path string, payload *ShowVerificationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.APIKeySigner != nil {
		if err := c.APIKeySigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
