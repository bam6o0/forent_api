// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": comment Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateCommentPayload is the comment create action payload.
type CreateCommentPayload struct {
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// comment_id or null
	ReplyTo int `form:"reply_to" json:"reply_to" xml:"reply_to"`
	// comment text
	Text string `form:"text" json:"text" xml:"text"`
}

// CreateCommentPath computes a request path to the create action of comment.
func CreateCommentPath() string {

	return fmt.Sprintf("/v1/comments")
}

// Create new comment
func (c *Client) CreateComment(ctx context.Context, path string, payload *CreateCommentPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateCommentRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCommentRequest create the request corresponding to the create action endpoint of the comment resource.
func (c *Client) NewCreateCommentRequest(ctx context.Context, path string, payload *CreateCommentPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ListCommentPayload is the comment list action payload.
type ListCommentPayload struct {
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
}

// ListCommentPath computes a request path to the list action of comment.
func ListCommentPath() string {

	return fmt.Sprintf("/v1/comments")
}

// Retrieve all comments.
func (c *Client) ListComment(ctx context.Context, path string, payload *ListCommentPayload, contentType string) (*http.Response, error) {
	req, err := c.NewListCommentRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCommentRequest create the request corresponding to the list action endpoint of the comment resource.
func (c *Client) NewListCommentRequest(ctx context.Context, path string, payload *ListCommentPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
