// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": message Resource Client
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateMessagePayload is the message create action payload.
type CreateMessagePayload struct {
	// offer id
	OfferID int `form:"offer_id" json:"offer_id" xml:"offer_id"`
	// comment text
	Text string `form:"text" json:"text" xml:"text"`
}

// CreateMessagePath computes a request path to the create action of message.
func CreateMessagePath() string {

	return fmt.Sprintf("/v1/messages")
}

// Create new message
func (c *Client) CreateMessage(ctx context.Context, path string, payload *CreateMessagePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateMessageRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateMessageRequest create the request corresponding to the create action endpoint of the message resource.
func (c *Client) NewCreateMessageRequest(ctx context.Context, path string, payload *CreateMessagePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListMessagePayload is the message list action payload.
type ListMessagePayload struct {
	// offer id
	OfferID int `form:"offer_id" json:"offer_id" xml:"offer_id"`
}

// ListMessagePath computes a request path to the list action of message.
func ListMessagePath() string {

	return fmt.Sprintf("/v1/messages")
}

// Retrieve all message in offer.
func (c *Client) ListMessage(ctx context.Context, path string, payload *ListMessagePayload, contentType string) (*http.Response, error) {
	req, err := c.NewListMessageRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListMessageRequest create the request corresponding to the list action endpoint of the message resource.
func (c *Client) NewListMessageRequest(ctx context.Context, path string, payload *ListMessagePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
