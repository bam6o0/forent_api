// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Application Controllers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ArticleController is the controller interface for the Article actions.
type ArticleController interface {
	goa.Muxer
	List(*ListArticleContext) error
}

// MountArticleController "mounts" a Article resource controller on the given service.
func MountArticleController(service *goa.Service, ctrl ArticleController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/articles", ctrl.MuxHandler("preflight", handleArticleOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListArticleContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListArticlePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleArticleOrigin(h)
	service.Mux.Handle("GET", "/v1/articles", ctrl.MuxHandler("list", h, unmarshalListArticlePayload))
	service.LogInfo("mount", "ctrl", "Article", "action", "List", "route", "GET /v1/articles", "security", "api_key")
}

// handleArticleOrigin applies the CORS response headers corresponding to the origin.
func handleArticleOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalListArticlePayload unmarshals the request body into the context request data Payload field.
func unmarshalListArticlePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listArticlePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// AuthenticationController is the controller interface for the Authentication actions.
type AuthenticationController interface {
	goa.Muxer
	Sigin(*SiginAuthenticationContext) error
	Signup(*SignupAuthenticationContext) error
}

// MountAuthenticationController "mounts" a Authentication resource controller on the given service.
func MountAuthenticationController(service *goa.Service, ctrl AuthenticationController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/signin", ctrl.MuxHandler("preflight", handleAuthenticationOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/signup", ctrl.MuxHandler("preflight", handleAuthenticationOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSiginAuthenticationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SignupPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Sigin(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAuthenticationOrigin(h)
	service.Mux.Handle("GET", "/v1/signin", ctrl.MuxHandler("sigin", h, unmarshalSiginAuthenticationPayload))
	service.LogInfo("mount", "ctrl", "Authentication", "action", "Sigin", "route", "GET /v1/signin", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSignupAuthenticationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SignupPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Signup(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAuthenticationOrigin(h)
	service.Mux.Handle("POST", "/v1/signup", ctrl.MuxHandler("signup", h, unmarshalSignupAuthenticationPayload))
	service.LogInfo("mount", "ctrl", "Authentication", "action", "Signup", "route", "POST /v1/signup", "security", "jwt")
}

// handleAuthenticationOrigin applies the CORS response headers corresponding to the origin.
func handleAuthenticationOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalSiginAuthenticationPayload unmarshals the request body into the context request data Payload field.
func unmarshalSiginAuthenticationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &signupPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalSignupAuthenticationPayload unmarshals the request body into the context request data Payload field.
func unmarshalSignupAuthenticationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &signupPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// CategoryController is the controller interface for the Category actions.
type CategoryController interface {
	goa.Muxer
	List(*ListCategoryContext) error
}

// MountCategoryController "mounts" a Category resource controller on the given service.
func MountCategoryController(service *goa.Service, ctrl CategoryController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/categories", ctrl.MuxHandler("preflight", handleCategoryOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListCategoryPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleCategoryOrigin(h)
	service.Mux.Handle("GET", "/v1/categories", ctrl.MuxHandler("list", h, unmarshalListCategoryPayload))
	service.LogInfo("mount", "ctrl", "Category", "action", "List", "route", "GET /v1/categories", "security", "api_key")
}

// handleCategoryOrigin applies the CORS response headers corresponding to the origin.
func handleCategoryOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalListCategoryPayload unmarshals the request body into the context request data Payload field.
func unmarshalListCategoryPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listCategoryPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// CommentController is the controller interface for the Comment actions.
type CommentController interface {
	goa.Muxer
	Create(*CreateCommentContext) error
	List(*ListCommentContext) error
}

// MountCommentController "mounts" a Comment resource controller on the given service.
func MountCommentController(service *goa.Service, ctrl CommentController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/comments", ctrl.MuxHandler("preflight", handleCommentOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCommentContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateCommentPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleCommentOrigin(h)
	service.Mux.Handle("POST", "/v1/comments", ctrl.MuxHandler("create", h, unmarshalCreateCommentPayload))
	service.LogInfo("mount", "ctrl", "Comment", "action", "Create", "route", "POST /v1/comments", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCommentContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListCommentPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleCommentOrigin(h)
	service.Mux.Handle("GET", "/v1/comments", ctrl.MuxHandler("list", h, unmarshalListCommentPayload))
	service.LogInfo("mount", "ctrl", "Comment", "action", "List", "route", "GET /v1/comments", "security", "api_key")
}

// handleCommentOrigin applies the CORS response headers corresponding to the origin.
func handleCommentOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateCommentPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateCommentPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createCommentPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalListCommentPayload unmarshals the request body into the context request data Payload field.
func unmarshalListCommentPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listCommentPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ItemController is the controller interface for the Item actions.
type ItemController interface {
	goa.Muxer
	Create(*CreateItemContext) error
	List(*ListItemContext) error
}

// MountItemController "mounts" a Item resource controller on the given service.
func MountItemController(service *goa.Service, ctrl ItemController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/items", ctrl.MuxHandler("preflight", handleItemOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateItemContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateItemPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleItemOrigin(h)
	service.Mux.Handle("POST", "/v1/items", ctrl.MuxHandler("create", h, unmarshalCreateItemPayload))
	service.LogInfo("mount", "ctrl", "Item", "action", "Create", "route", "POST /v1/items", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListItemContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListItemPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleItemOrigin(h)
	service.Mux.Handle("GET", "/v1/items", ctrl.MuxHandler("list", h, unmarshalListItemPayload))
	service.LogInfo("mount", "ctrl", "Item", "action", "List", "route", "GET /v1/items", "security", "api_key")
}

// handleItemOrigin applies the CORS response headers corresponding to the origin.
func handleItemOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateItemPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateItemPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createItemPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalListItemPayload unmarshals the request body into the context request data Payload field.
func unmarshalListItemPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listItemPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// LargecategoryController is the controller interface for the Largecategory actions.
type LargecategoryController interface {
	goa.Muxer
	List(*ListLargecategoryContext) error
}

// MountLargecategoryController "mounts" a Largecategory resource controller on the given service.
func MountLargecategoryController(service *goa.Service, ctrl LargecategoryController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/largecategories", ctrl.MuxHandler("preflight", handleLargecategoryOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListLargecategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleLargecategoryOrigin(h)
	service.Mux.Handle("GET", "/v1/largecategories", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Largecategory", "action", "List", "route", "GET /v1/largecategories", "security", "api_key")
}

// handleLargecategoryOrigin applies the CORS response headers corresponding to the origin.
func handleLargecategoryOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// MessageController is the controller interface for the Message actions.
type MessageController interface {
	goa.Muxer
	Create(*CreateMessageContext) error
	List(*ListMessageContext) error
}

// MountMessageController "mounts" a Message resource controller on the given service.
func MountMessageController(service *goa.Service, ctrl MessageController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/messages", ctrl.MuxHandler("preflight", handleMessageOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateMessageContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateMessagePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMessageOrigin(h)
	service.Mux.Handle("POST", "/v1/messages", ctrl.MuxHandler("create", h, unmarshalCreateMessagePayload))
	service.LogInfo("mount", "ctrl", "Message", "action", "Create", "route", "POST /v1/messages", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListMessageContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListMessagePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMessageOrigin(h)
	service.Mux.Handle("GET", "/v1/messages", ctrl.MuxHandler("list", h, unmarshalListMessagePayload))
	service.LogInfo("mount", "ctrl", "Message", "action", "List", "route", "GET /v1/messages", "security", "jwt")
}

// handleMessageOrigin applies the CORS response headers corresponding to the origin.
func handleMessageOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateMessagePayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateMessagePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createMessagePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalListMessagePayload unmarshals the request body into the context request data Payload field.
func unmarshalListMessagePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listMessagePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// MiddlecategoryController is the controller interface for the Middlecategory actions.
type MiddlecategoryController interface {
	goa.Muxer
	List(*ListMiddlecategoryContext) error
}

// MountMiddlecategoryController "mounts" a Middlecategory resource controller on the given service.
func MountMiddlecategoryController(service *goa.Service, ctrl MiddlecategoryController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/middlecategories", ctrl.MuxHandler("preflight", handleMiddlecategoryOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListMiddlecategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListMiddlecategoryPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleMiddlecategoryOrigin(h)
	service.Mux.Handle("GET", "/v1/middlecategories", ctrl.MuxHandler("list", h, unmarshalListMiddlecategoryPayload))
	service.LogInfo("mount", "ctrl", "Middlecategory", "action", "List", "route", "GET /v1/middlecategories", "security", "api_key")
}

// handleMiddlecategoryOrigin applies the CORS response headers corresponding to the origin.
func handleMiddlecategoryOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalListMiddlecategoryPayload unmarshals the request body into the context request data Payload field.
func unmarshalListMiddlecategoryPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listMiddlecategoryPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// OfferController is the controller interface for the Offer actions.
type OfferController interface {
	goa.Muxer
	Accept(*AcceptOfferContext) error
	Create(*CreateOfferContext) error
	List(*ListOfferContext) error
}

// MountOfferController "mounts" a Offer resource controller on the given service.
func MountOfferController(service *goa.Service, ctrl OfferController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/offers", ctrl.MuxHandler("preflight", handleOfferOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAcceptOfferContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AcceptOfferPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Accept(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleOfferOrigin(h)
	service.Mux.Handle("PUT", "/v1/offers", ctrl.MuxHandler("accept", h, unmarshalAcceptOfferPayload))
	service.LogInfo("mount", "ctrl", "Offer", "action", "Accept", "route", "PUT /v1/offers", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateOfferContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateOfferPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleOfferOrigin(h)
	service.Mux.Handle("POST", "/v1/offers", ctrl.MuxHandler("create", h, unmarshalCreateOfferPayload))
	service.LogInfo("mount", "ctrl", "Offer", "action", "Create", "route", "POST /v1/offers", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListOfferContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListOfferPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleOfferOrigin(h)
	service.Mux.Handle("GET", "/v1/offers", ctrl.MuxHandler("list", h, unmarshalListOfferPayload))
	service.LogInfo("mount", "ctrl", "Offer", "action", "List", "route", "GET /v1/offers", "security", "jwt")
}

// handleOfferOrigin applies the CORS response headers corresponding to the origin.
func handleOfferOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAcceptOfferPayload unmarshals the request body into the context request data Payload field.
func unmarshalAcceptOfferPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &acceptOfferPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalCreateOfferPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateOfferPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createOfferPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalListOfferPayload unmarshals the request body into the context request data Payload field.
func unmarshalListOfferPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listOfferPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PlaceController is the controller interface for the Place actions.
type PlaceController interface {
	goa.Muxer
	List(*ListPlaceContext) error
}

// MountPlaceController "mounts" a Place resource controller on the given service.
func MountPlaceController(service *goa.Service, ctrl PlaceController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/places", ctrl.MuxHandler("preflight", handlePlaceOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPlaceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ListPlacePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handlePlaceOrigin(h)
	service.Mux.Handle("GET", "/v1/places", ctrl.MuxHandler("list", h, unmarshalListPlacePayload))
	service.LogInfo("mount", "ctrl", "Place", "action", "List", "route", "GET /v1/places", "security", "api_key")
}

// handlePlaceOrigin applies the CORS response headers corresponding to the origin.
func handlePlaceOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalListPlacePayload unmarshals the request body into the context request data Payload field.
func unmarshalListPlacePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &listPlacePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ProfileController is the controller interface for the Profile actions.
type ProfileController interface {
	goa.Muxer
	Create(*CreateProfileContext) error
	Show(*ShowProfileContext) error
}

// MountProfileController "mounts" a Profile resource controller on the given service.
func MountProfileController(service *goa.Service, ctrl ProfileController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/profiles", ctrl.MuxHandler("preflight", handleProfileOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateProfileContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateProfilePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProfileOrigin(h)
	service.Mux.Handle("POST", "/v1/profiles", ctrl.MuxHandler("create", h, unmarshalCreateProfilePayload))
	service.LogInfo("mount", "ctrl", "Profile", "action", "Create", "route", "POST /v1/profiles", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowProfileContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ShowProfilePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProfileOrigin(h)
	service.Mux.Handle("GET", "/v1/profiles", ctrl.MuxHandler("show", h, unmarshalShowProfilePayload))
	service.LogInfo("mount", "ctrl", "Profile", "action", "Show", "route", "GET /v1/profiles", "security", "jwt")
}

// handleProfileOrigin applies the CORS response headers corresponding to the origin.
func handleProfileOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateProfilePayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateProfilePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createProfilePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalShowProfilePayload unmarshals the request body into the context request data Payload field.
func unmarshalShowProfilePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &showProfilePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// VerificationController is the controller interface for the Verification actions.
type VerificationController interface {
	goa.Muxer
	Create(*CreateVerificationContext) error
	Show(*ShowVerificationContext) error
}

// MountVerificationController "mounts" a Verification resource controller on the given service.
func MountVerificationController(service *goa.Service, ctrl VerificationController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/verifications", ctrl.MuxHandler("preflight", handleVerificationOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateVerificationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateVerificationPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleVerificationOrigin(h)
	service.Mux.Handle("POST", "/v1/verifications", ctrl.MuxHandler("create", h, unmarshalCreateVerificationPayload))
	service.LogInfo("mount", "ctrl", "Verification", "action", "Create", "route", "POST /v1/verifications", "security", "api_key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowVerificationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ShowVerificationPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("api_key", h)
	h = handleVerificationOrigin(h)
	service.Mux.Handle("GET", "/v1/verifications", ctrl.MuxHandler("show", h, unmarshalShowVerificationPayload))
	service.LogInfo("mount", "ctrl", "Verification", "action", "Show", "route", "GET /v1/verifications", "security", "api_key")
}

// handleVerificationOrigin applies the CORS response headers corresponding to the origin.
func handleVerificationOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateVerificationPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateVerificationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createVerificationPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalShowVerificationPayload unmarshals the request body into the context request data Payload field.
func unmarshalShowVerificationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &showVerificationPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
