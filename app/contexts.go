// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Application Contexts
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"time"
)

// ListArticleContext provides the article list action context.
type ListArticleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListArticlePayload
}

// NewListArticleContext parses the incoming request URL and body, performs validations and creates the
// context used by the article controller list action.
func NewListArticleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListArticleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListArticleContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// listArticlePayload is the article list action payload.
type listArticlePayload struct {
	// article ID
	ArticleID *int `form:"articleID,omitempty" json:"articleID,omitempty" xml:"articleID,omitempty"`
	// category id
	CategoryID *int `form:"categoryID,omitempty" json:"categoryID,omitempty" xml:"categoryID,omitempty"`
	// item ID
	ItemID *int `form:"itemID,omitempty" json:"itemID,omitempty" xml:"itemID,omitempty"`
	// user id
	UserID *int `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
}

// Publicize creates ListArticlePayload from listArticlePayload
func (payload *listArticlePayload) Publicize() *ListArticlePayload {
	var pub ListArticlePayload
	if payload.ArticleID != nil {
		pub.ArticleID = payload.ArticleID
	}
	if payload.CategoryID != nil {
		pub.CategoryID = payload.CategoryID
	}
	if payload.ItemID != nil {
		pub.ItemID = payload.ItemID
	}
	if payload.UserID != nil {
		pub.UserID = payload.UserID
	}
	return &pub
}

// ListArticlePayload is the article list action payload.
type ListArticlePayload struct {
	// article ID
	ArticleID *int `form:"articleID,omitempty" json:"articleID,omitempty" xml:"articleID,omitempty"`
	// category id
	CategoryID *int `form:"categoryID,omitempty" json:"categoryID,omitempty" xml:"categoryID,omitempty"`
	// item ID
	ItemID *int `form:"itemID,omitempty" json:"itemID,omitempty" xml:"itemID,omitempty"`
	// user id
	UserID *int `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ListArticleContext) OK(r ArticleCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.article+json; type=collection")
	}
	if r == nil {
		r = ArticleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// SiginAuthenticationContext provides the authentication sigin action context.
type SiginAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SignupPayload
}

// NewSiginAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller sigin action.
func NewSiginAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*SiginAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SiginAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SiginAuthenticationContext) OK(r *Success) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.security.success")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SiginAuthenticationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SiginAuthenticationContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SiginAuthenticationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SignupAuthenticationContext provides the authentication signup action context.
type SignupAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SignupPayload
}

// NewSignupAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller signup action.
func NewSignupAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*SignupAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SignupAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SignupAuthenticationContext) OK(r *Success) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.security.success")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SignupAuthenticationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SignupAuthenticationContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SignupAuthenticationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListCategoryContext provides the category list action context.
type ListCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListCategoryPayload
}

// NewListCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the category controller list action.
func NewListCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// listCategoryPayload is the category list action payload.
type listCategoryPayload struct {
	// middlecategory id
	MiddlecategoryID *int `form:"middlecategoryID,omitempty" json:"middlecategoryID,omitempty" xml:"middlecategoryID,omitempty"`
}

// Publicize creates ListCategoryPayload from listCategoryPayload
func (payload *listCategoryPayload) Publicize() *ListCategoryPayload {
	var pub ListCategoryPayload
	if payload.MiddlecategoryID != nil {
		pub.MiddlecategoryID = payload.MiddlecategoryID
	}
	return &pub
}

// ListCategoryPayload is the category list action payload.
type ListCategoryPayload struct {
	// middlecategory id
	MiddlecategoryID *int `form:"middlecategoryID,omitempty" json:"middlecategoryID,omitempty" xml:"middlecategoryID,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCategoryContext) OK(r CategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreateCommentContext provides the comment create action context.
type CreateCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCommentPayload
}

// NewCreateCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller create action.
func NewCreateCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCommentPayload is the comment create action payload.
type createCommentPayload struct {
	// item id
	ItemID *int `form:"item_id,omitempty" json:"item_id,omitempty" xml:"item_id,omitempty"`
	// comment_id or null
	ReplyTo *int `form:"reply_to,omitempty" json:"reply_to,omitempty" xml:"reply_to,omitempty"`
	// comment text
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// comment user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCommentPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "item_id"))
	}
	if payload.Text == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "text"))
	}
	if payload.ReplyTo == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "reply_to"))
	}
	return
}

// Publicize creates CreateCommentPayload from createCommentPayload
func (payload *createCommentPayload) Publicize() *CreateCommentPayload {
	var pub CreateCommentPayload
	if payload.ItemID != nil {
		pub.ItemID = *payload.ItemID
	}
	if payload.ReplyTo != nil {
		pub.ReplyTo = *payload.ReplyTo
	}
	if payload.Text != nil {
		pub.Text = *payload.Text
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateCommentPayload is the comment create action payload.
type CreateCommentPayload struct {
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// comment_id or null
	ReplyTo int `form:"reply_to" json:"reply_to" xml:"reply_to"`
	// comment text
	Text string `form:"text" json:"text" xml:"text"`
	// comment user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCommentPayload) Validate() (err error) {

	if payload.Text == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "text"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCommentContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCommentContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListCommentContext provides the comment list action context.
type ListCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller list action.
func NewListCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCommentContext) OK(r CommentCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment+json; type=collection")
	}
	if r == nil {
		r = CommentCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowCommentContext provides the comment show action context.
type ShowCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ItemID int
}

// NewShowCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller show action.
func NewShowCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramItemID := req.Params["itemID"]
	if len(paramItemID) > 0 {
		rawItemID := paramItemID[0]
		if itemID, err2 := strconv.Atoi(rawItemID); err2 == nil {
			rctx.ItemID = itemID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("itemID", rawItemID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCommentContext) OK(r *Comment) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCommentContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateItemContext provides the item create action context.
type CreateItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateItemPayload
}

// NewCreateItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller create action.
func NewCreateItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createItemPayload is the item create action payload.
type createItemPayload struct {
	// category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// compensation of item
	Compensation *int `form:"compensation,omitempty" json:"compensation,omitempty" xml:"compensation,omitempty"`
	// description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// item image 1
	Image1 *string `form:"image1,omitempty" json:"image1,omitempty" xml:"image1,omitempty"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// category ID
	PlaceID *int `form:"place_id,omitempty" json:"place_id,omitempty" xml:"place_id,omitempty"`
	// price of item
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createItemPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	if payload.Compensation == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "compensation"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_id"))
	}
	if payload.PlaceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "place_id"))
	}
	if payload.Image1 == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "image1"))
	}
	return
}

// Publicize creates CreateItemPayload from createItemPayload
func (payload *createItemPayload) Publicize() *CreateItemPayload {
	var pub CreateItemPayload
	if payload.CategoryID != nil {
		pub.CategoryID = *payload.CategoryID
	}
	if payload.Compensation != nil {
		pub.Compensation = *payload.Compensation
	}
	if payload.Description != nil {
		pub.Description = *payload.Description
	}
	if payload.Image1 != nil {
		pub.Image1 = *payload.Image1
	}
	if payload.Image2 != nil {
		pub.Image2 = payload.Image2
	}
	if payload.Image3 != nil {
		pub.Image3 = payload.Image3
	}
	if payload.Image4 != nil {
		pub.Image4 = payload.Image4
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.PlaceID != nil {
		pub.PlaceID = *payload.PlaceID
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateItemPayload is the item create action payload.
type CreateItemPayload struct {
	// category ID
	CategoryID int `form:"category_id" json:"category_id" xml:"category_id"`
	// compensation of item
	Compensation int `form:"compensation" json:"compensation" xml:"compensation"`
	// description of item
	Description string `form:"description" json:"description" xml:"description"`
	// item image 1
	Image1 string `form:"image1" json:"image1" xml:"image1"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
	// category ID
	PlaceID int `form:"place_id" json:"place_id" xml:"place_id"`
	// price of item
	Price int `form:"price" json:"price" xml:"price"`
	// user ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateItemPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}

	if payload.Image1 == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "image1"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateItemContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateItemContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteItemContext provides the item delete action context.
type DeleteItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *DeleteItemPayload
}

// NewDeleteItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller delete action.
func NewDeleteItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// deleteItemPayload is the item delete action payload.
type deleteItemPayload struct {
	// item ID
	ItemID *int `form:"itemID,omitempty" json:"itemID,omitempty" xml:"itemID,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *deleteItemPayload) Validate() (err error) {
	if payload.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemID"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates DeleteItemPayload from deleteItemPayload
func (payload *deleteItemPayload) Publicize() *DeleteItemPayload {
	var pub DeleteItemPayload
	if payload.ItemID != nil {
		pub.ItemID = *payload.ItemID
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// DeleteItemPayload is the item delete action payload.
type DeleteItemPayload struct {
	// item ID
	ItemID int `form:"itemID" json:"itemID" xml:"itemID"`
	// user ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *DeleteItemPayload) Validate() (err error) {

	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteItemContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteItemContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteItemContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListItemContext provides the item list action context.
type ListItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListItemPayload
}

// NewListItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller list action.
func NewListItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// listItemPayload is the item list action payload.
type listItemPayload struct {
	// category id
	CategoryID *int `form:"categoryID,omitempty" json:"categoryID,omitempty" xml:"categoryID,omitempty"`
	// city id
	CityID *string `form:"cityID,omitempty" json:"cityID,omitempty" xml:"cityID,omitempty"`
	// item ID
	ItemID *int `form:"itemID,omitempty" json:"itemID,omitempty" xml:"itemID,omitempty"`
	// place id
	PlaceID *int `form:"placeID,omitempty" json:"placeID,omitempty" xml:"placeID,omitempty"`
	// user id
	UserID *int `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
}

// Publicize creates ListItemPayload from listItemPayload
func (payload *listItemPayload) Publicize() *ListItemPayload {
	var pub ListItemPayload
	if payload.CategoryID != nil {
		pub.CategoryID = payload.CategoryID
	}
	if payload.CityID != nil {
		pub.CityID = payload.CityID
	}
	if payload.ItemID != nil {
		pub.ItemID = payload.ItemID
	}
	if payload.PlaceID != nil {
		pub.PlaceID = payload.PlaceID
	}
	if payload.UserID != nil {
		pub.UserID = payload.UserID
	}
	return &pub
}

// ListItemPayload is the item list action payload.
type ListItemPayload struct {
	// category id
	CategoryID *int `form:"categoryID,omitempty" json:"categoryID,omitempty" xml:"categoryID,omitempty"`
	// city id
	CityID *string `form:"cityID,omitempty" json:"cityID,omitempty" xml:"cityID,omitempty"`
	// item ID
	ItemID *int `form:"itemID,omitempty" json:"itemID,omitempty" xml:"itemID,omitempty"`
	// place id
	PlaceID *int `form:"placeID,omitempty" json:"placeID,omitempty" xml:"placeID,omitempty"`
	// user id
	UserID *int `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ListItemContext) OK(r ItemCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.item+json; type=collection")
	}
	if r == nil {
		r = ItemCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListItemContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateItemContext provides the item update action context.
type UpdateItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UpdateItemPayload
}

// NewUpdateItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller update action.
func NewUpdateItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// updateItemPayload is the item update action payload.
type updateItemPayload struct {
	// Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// compensation of item
	Compensation *int `form:"compensation,omitempty" json:"compensation,omitempty" xml:"compensation,omitempty"`
	// description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// item image 1
	Image1 *string `form:"image1,omitempty" json:"image1,omitempty" xml:"image1,omitempty"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// item ID
	ItemID *int `form:"itemID,omitempty" json:"itemID,omitempty" xml:"itemID,omitempty"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Place ID
	PlaceID *int `form:"place_id,omitempty" json:"place_id,omitempty" xml:"place_id,omitempty"`
	// price of item
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateItemPayload) Validate() (err error) {
	if payload.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "itemID"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates UpdateItemPayload from updateItemPayload
func (payload *updateItemPayload) Publicize() *UpdateItemPayload {
	var pub UpdateItemPayload
	if payload.CategoryID != nil {
		pub.CategoryID = payload.CategoryID
	}
	if payload.Compensation != nil {
		pub.Compensation = payload.Compensation
	}
	if payload.Description != nil {
		pub.Description = payload.Description
	}
	if payload.Image1 != nil {
		pub.Image1 = payload.Image1
	}
	if payload.Image2 != nil {
		pub.Image2 = payload.Image2
	}
	if payload.Image3 != nil {
		pub.Image3 = payload.Image3
	}
	if payload.Image4 != nil {
		pub.Image4 = payload.Image4
	}
	if payload.ItemID != nil {
		pub.ItemID = *payload.ItemID
	}
	if payload.Name != nil {
		pub.Name = payload.Name
	}
	if payload.PlaceID != nil {
		pub.PlaceID = payload.PlaceID
	}
	if payload.Price != nil {
		pub.Price = payload.Price
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// UpdateItemPayload is the item update action payload.
type UpdateItemPayload struct {
	// Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// compensation of item
	Compensation *int `form:"compensation,omitempty" json:"compensation,omitempty" xml:"compensation,omitempty"`
	// description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// item image 1
	Image1 *string `form:"image1,omitempty" json:"image1,omitempty" xml:"image1,omitempty"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// item ID
	ItemID int `form:"itemID" json:"itemID" xml:"itemID"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Place ID
	PlaceID *int `form:"place_id,omitempty" json:"place_id,omitempty" xml:"place_id,omitempty"`
	// price of item
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// user ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateItemPayload) Validate() (err error) {

	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateItemContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateItemContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateItemContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListLargecategoryContext provides the largecategory list action context.
type ListLargecategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListLargecategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the largecategory controller list action.
func NewListLargecategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListLargecategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListLargecategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListLargecategoryContext) OK(r LargecategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.largecategory+json; type=collection")
	}
	if r == nil {
		r = LargecategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListMiddlecategoryContext provides the middlecategory list action context.
type ListMiddlecategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListMiddlecategoryPayload
}

// NewListMiddlecategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the middlecategory controller list action.
func NewListMiddlecategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMiddlecategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMiddlecategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// listMiddlecategoryPayload is the middlecategory list action payload.
type listMiddlecategoryPayload struct {
	// largecategory id
	LargecategoryID *int `form:"largecategoryID,omitempty" json:"largecategoryID,omitempty" xml:"largecategoryID,omitempty"`
}

// Publicize creates ListMiddlecategoryPayload from listMiddlecategoryPayload
func (payload *listMiddlecategoryPayload) Publicize() *ListMiddlecategoryPayload {
	var pub ListMiddlecategoryPayload
	if payload.LargecategoryID != nil {
		pub.LargecategoryID = payload.LargecategoryID
	}
	return &pub
}

// ListMiddlecategoryPayload is the middlecategory list action payload.
type ListMiddlecategoryPayload struct {
	// largecategory id
	LargecategoryID *int `form:"largecategoryID,omitempty" json:"largecategoryID,omitempty" xml:"largecategoryID,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMiddlecategoryContext) OK(r MiddlecategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.middlecategory+json; type=collection")
	}
	if r == nil {
		r = MiddlecategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// AcceptOfferContext provides the offer accept action context.
type AcceptOfferContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AcceptOfferPayload
}

// NewAcceptOfferContext parses the incoming request URL and body, performs validations and creates the
// context used by the offer controller accept action.
func NewAcceptOfferContext(ctx context.Context, r *http.Request, service *goa.Service) (*AcceptOfferContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AcceptOfferContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// acceptOfferPayload is the offer accept action payload.
type acceptOfferPayload struct {
	// offer ID
	OfferID *int `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
	// owner ID
	OwnerID *int `form:"owner_id,omitempty" json:"owner_id,omitempty" xml:"owner_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *acceptOfferPayload) Validate() (err error) {
	if payload.OfferID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "offer_id"))
	}
	if payload.OwnerID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "owner_id"))
	}
	return
}

// Publicize creates AcceptOfferPayload from acceptOfferPayload
func (payload *acceptOfferPayload) Publicize() *AcceptOfferPayload {
	var pub AcceptOfferPayload
	if payload.OfferID != nil {
		pub.OfferID = *payload.OfferID
	}
	if payload.OwnerID != nil {
		pub.OwnerID = *payload.OwnerID
	}
	return &pub
}

// AcceptOfferPayload is the offer accept action payload.
type AcceptOfferPayload struct {
	// offer ID
	OfferID int `form:"offer_id" json:"offer_id" xml:"offer_id"`
	// owner ID
	OwnerID int `form:"owner_id" json:"owner_id" xml:"owner_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *AcceptOfferPayload) Validate() (err error) {

	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AcceptOfferContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AcceptOfferContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AcceptOfferContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateOfferContext provides the offer create action context.
type CreateOfferContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateOfferPayload
}

// NewCreateOfferContext parses the incoming request URL and body, performs validations and creates the
// context used by the offer controller create action.
func NewCreateOfferContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateOfferContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateOfferContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createOfferPayload is the offer create action payload.
type createOfferPayload struct {
	// rental end at
	EndAt *time.Time `form:"end_at,omitempty" json:"end_at,omitempty" xml:"end_at,omitempty"`
	// item id
	ItemID *int `form:"item_id,omitempty" json:"item_id,omitempty" xml:"item_id,omitempty"`
	// offer price
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// rental start at
	StartAt *time.Time `form:"start_at,omitempty" json:"start_at,omitempty" xml:"start_at,omitempty"`
	// offer user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createOfferPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "item_id"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	if payload.StartAt == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "start_at"))
	}
	if payload.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "end_at"))
	}
	return
}

// Publicize creates CreateOfferPayload from createOfferPayload
func (payload *createOfferPayload) Publicize() *CreateOfferPayload {
	var pub CreateOfferPayload
	if payload.EndAt != nil {
		pub.EndAt = *payload.EndAt
	}
	if payload.ItemID != nil {
		pub.ItemID = *payload.ItemID
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.StartAt != nil {
		pub.StartAt = *payload.StartAt
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateOfferPayload is the offer create action payload.
type CreateOfferPayload struct {
	// rental end at
	EndAt time.Time `form:"end_at" json:"end_at" xml:"end_at"`
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// offer price
	Price int `form:"price" json:"price" xml:"price"`
	// rental start at
	StartAt time.Time `form:"start_at" json:"start_at" xml:"start_at"`
	// offer user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateOfferPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateOfferContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateOfferContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListOfferContext provides the offer list action context.
type ListOfferContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListOfferPayload
}

// NewListOfferContext parses the incoming request URL and body, performs validations and creates the
// context used by the offer controller list action.
func NewListOfferContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListOfferContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListOfferContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// listOfferPayload is the offer list action payload.
type listOfferPayload struct {
	// offer ID
	OfferID *int `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *listOfferPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates ListOfferPayload from listOfferPayload
func (payload *listOfferPayload) Publicize() *ListOfferPayload {
	var pub ListOfferPayload
	if payload.OfferID != nil {
		pub.OfferID = payload.OfferID
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// ListOfferPayload is the offer list action payload.
type ListOfferPayload struct {
	// offer ID
	OfferID *int `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
	// user ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ListOfferContext) OK(r OfferCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.offer+json; type=collection")
	}
	if r == nil {
		r = OfferCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListOfferContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListOfferContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListPlaceContext provides the place list action context.
type ListPlaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListPlacePayload
}

// NewListPlaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the place controller list action.
func NewListPlaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPlaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPlaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// listPlacePayload is the place list action payload.
type listPlacePayload struct {
	// place id
	PlaceID *int `form:"PlaceID,omitempty" json:"PlaceID,omitempty" xml:"PlaceID,omitempty"`
}

// Publicize creates ListPlacePayload from listPlacePayload
func (payload *listPlacePayload) Publicize() *ListPlacePayload {
	var pub ListPlacePayload
	if payload.PlaceID != nil {
		pub.PlaceID = payload.PlaceID
	}
	return &pub
}

// ListPlacePayload is the place list action payload.
type ListPlacePayload struct {
	// place id
	PlaceID *int `form:"PlaceID,omitempty" json:"PlaceID,omitempty" xml:"PlaceID,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPlaceContext) OK(r PlaceCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.place+json; type=collection")
	}
	if r == nil {
		r = PlaceCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreateProfileContext provides the profile create action context.
type CreateProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateProfilePayload
}

// NewCreateProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller create action.
func NewCreateProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createProfilePayload is the profile create action payload.
type createProfilePayload struct {
	// first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// last_name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createProfilePayload) Validate() (err error) {
	if payload.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates CreateProfilePayload from createProfilePayload
func (payload *createProfilePayload) Publicize() *CreateProfilePayload {
	var pub CreateProfilePayload
	if payload.FirstName != nil {
		pub.FirstName = *payload.FirstName
	}
	if payload.LastName != nil {
		pub.LastName = *payload.LastName
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateProfilePayload is the profile create action payload.
type CreateProfilePayload struct {
	// first name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// last_name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateProfilePayload) Validate() (err error) {
	if payload.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateProfileContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteProfileContext provides the profile delete action context.
type DeleteProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID *int
}

// NewDeleteProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller delete action.
func NewDeleteProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			tmp3 := profileID
			tmp2 := &tmp3
			rctx.ProfileID = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteProfileContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowProfileContext provides the profile show action context.
type ShowProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ShowProfilePayload
}

// NewShowProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller show action.
func NewShowProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// showProfilePayload is the profile show action payload.
type showProfilePayload struct {
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *showProfilePayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates ShowProfilePayload from showProfilePayload
func (payload *showProfilePayload) Publicize() *ShowProfilePayload {
	var pub ShowProfilePayload
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// ShowProfilePayload is the profile show action payload.
type ShowProfilePayload struct {
	// user ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowProfileContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateProfileContext provides the profile update action context.
type UpdateProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID *int
	Payload   *UpdateProfilePayload
}

// NewUpdateProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller update action.
func NewUpdateProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			tmp5 := profileID
			tmp4 := &tmp5
			rctx.ProfileID = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// updateProfilePayload is the profile update action payload.
type updateProfilePayload struct {
	// avatar image url
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// cover image url
	CoverImage *string `form:"cover_image,omitempty" json:"cover_image,omitempty" xml:"cover_image,omitempty"`
	// first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// user introduciton
	Introduction *string `form:"introduction,omitempty" json:"introduction,omitempty" xml:"introduction,omitempty"`
	// last_name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateProfilePayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates UpdateProfilePayload from updateProfilePayload
func (payload *updateProfilePayload) Publicize() *UpdateProfilePayload {
	var pub UpdateProfilePayload
	if payload.AvatarImage != nil {
		pub.AvatarImage = payload.AvatarImage
	}
	if payload.CoverImage != nil {
		pub.CoverImage = payload.CoverImage
	}
	if payload.FirstName != nil {
		pub.FirstName = payload.FirstName
	}
	if payload.Introduction != nil {
		pub.Introduction = payload.Introduction
	}
	if payload.LastName != nil {
		pub.LastName = payload.LastName
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// UpdateProfilePayload is the profile update action payload.
type UpdateProfilePayload struct {
	// avatar image url
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// cover image url
	CoverImage *string `form:"cover_image,omitempty" json:"cover_image,omitempty" xml:"cover_image,omitempty"`
	// first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// user introduciton
	Introduction *string `form:"introduction,omitempty" json:"introduction,omitempty" xml:"introduction,omitempty"`
	// last_name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateProfileContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateVerificationContext provides the verification create action context.
type CreateVerificationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateVerificationPayload
}

// NewCreateVerificationContext parses the incoming request URL and body, performs validations and creates the
// context used by the verification controller create action.
func NewCreateVerificationContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateVerificationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateVerificationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createVerificationPayload is the verification create action payload.
type createVerificationPayload struct {
	// address flag
	Email *bool `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Unique facebook ID
	FacebookID *int `form:"facebook_id,omitempty" json:"facebook_id,omitempty" xml:"facebook_id,omitempty"`
	// Unique google ID
	GoogleID *int `form:"google_id,omitempty" json:"google_id,omitempty" xml:"google_id,omitempty"`
	// identification flag
	Identification *bool `form:"identification,omitempty" json:"identification,omitempty" xml:"identification,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createVerificationPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.Identification == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "identification"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.FacebookID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "facebook_id"))
	}
	if payload.GoogleID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "google_id"))
	}
	return
}

// Publicize creates CreateVerificationPayload from createVerificationPayload
func (payload *createVerificationPayload) Publicize() *CreateVerificationPayload {
	var pub CreateVerificationPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.FacebookID != nil {
		pub.FacebookID = *payload.FacebookID
	}
	if payload.GoogleID != nil {
		pub.GoogleID = *payload.GoogleID
	}
	if payload.Identification != nil {
		pub.Identification = *payload.Identification
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateVerificationPayload is the verification create action payload.
type CreateVerificationPayload struct {
	// address flag
	Email bool `form:"email" json:"email" xml:"email"`
	// Unique facebook ID
	FacebookID int `form:"facebook_id" json:"facebook_id" xml:"facebook_id"`
	// Unique google ID
	GoogleID int `form:"google_id" json:"google_id" xml:"google_id"`
	// identification flag
	Identification bool `form:"identification" json:"identification" xml:"identification"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateVerificationPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateVerificationContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateVerificationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteVerificationContext provides the verification delete action context.
type DeleteVerificationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	VerificationID int
}

// NewDeleteVerificationContext parses the incoming request URL and body, performs validations and creates the
// context used by the verification controller delete action.
func NewDeleteVerificationContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteVerificationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteVerificationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramVerificationID := req.Params["verificationID"]
	if len(paramVerificationID) > 0 {
		rawVerificationID := paramVerificationID[0]
		if verificationID, err2 := strconv.Atoi(rawVerificationID); err2 == nil {
			rctx.VerificationID = verificationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("verificationID", rawVerificationID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteVerificationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteVerificationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteVerificationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowVerificationContext provides the verification show action context.
type ShowVerificationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	VerificationID int
}

// NewShowVerificationContext parses the incoming request URL and body, performs validations and creates the
// context used by the verification controller show action.
func NewShowVerificationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowVerificationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowVerificationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramVerificationID := req.Params["verificationID"]
	if len(paramVerificationID) > 0 {
		rawVerificationID := paramVerificationID[0]
		if verificationID, err2 := strconv.Atoi(rawVerificationID); err2 == nil {
			rctx.VerificationID = verificationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("verificationID", rawVerificationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowVerificationContext) OK(r *Verification) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.verification+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowVerificationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateVerificationContext provides the verification update action context.
type UpdateVerificationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	VerificationID int
	Payload        *UpdateVerificationPayload
}

// NewUpdateVerificationContext parses the incoming request URL and body, performs validations and creates the
// context used by the verification controller update action.
func NewUpdateVerificationContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateVerificationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateVerificationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramVerificationID := req.Params["verificationID"]
	if len(paramVerificationID) > 0 {
		rawVerificationID := paramVerificationID[0]
		if verificationID, err2 := strconv.Atoi(rawVerificationID); err2 == nil {
			rctx.VerificationID = verificationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("verificationID", rawVerificationID, "integer"))
		}
	}
	return &rctx, err
}

// updateVerificationPayload is the verification update action payload.
type updateVerificationPayload struct {
	// address flag
	Email *bool `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Unique facebook ID
	FacebookID *int `form:"facebook_id,omitempty" json:"facebook_id,omitempty" xml:"facebook_id,omitempty"`
	// Unique google ID
	GoogleID *int `form:"google_id,omitempty" json:"google_id,omitempty" xml:"google_id,omitempty"`
	// identification flag
	Identification *bool `form:"identification,omitempty" json:"identification,omitempty" xml:"identification,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateVerificationPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates UpdateVerificationPayload from updateVerificationPayload
func (payload *updateVerificationPayload) Publicize() *UpdateVerificationPayload {
	var pub UpdateVerificationPayload
	if payload.Email != nil {
		pub.Email = payload.Email
	}
	if payload.FacebookID != nil {
		pub.FacebookID = payload.FacebookID
	}
	if payload.GoogleID != nil {
		pub.GoogleID = payload.GoogleID
	}
	if payload.Identification != nil {
		pub.Identification = payload.Identification
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// UpdateVerificationPayload is the verification update action payload.
type UpdateVerificationPayload struct {
	// address flag
	Email *bool `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Unique facebook ID
	FacebookID *int `form:"facebook_id,omitempty" json:"facebook_id,omitempty" xml:"facebook_id,omitempty"`
	// Unique google ID
	GoogleID *int `form:"google_id,omitempty" json:"google_id,omitempty" xml:"google_id,omitempty"`
	// identification flag
	Identification *bool `form:"identification,omitempty" json:"identification,omitempty" xml:"identification,omitempty"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateVerificationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateVerificationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateVerificationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
