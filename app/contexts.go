// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Application Contexts
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"time"
)

// ListArticleContext provides the article list action context.
type ListArticleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListArticleContext parses the incoming request URL and body, performs validations and creates the
// context used by the article controller list action.
func NewListArticleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListArticleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListArticleContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListArticleContext) OK(r ArticleCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.article+json; type=collection")
	}
	if r == nil {
		r = ArticleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowArticleContext provides the article show action context.
type ShowArticleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ArticleID int
}

// NewShowArticleContext parses the incoming request URL and body, performs validations and creates the
// context used by the article controller show action.
func NewShowArticleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowArticleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowArticleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramArticleID := req.Params["articleID"]
	if len(paramArticleID) > 0 {
		rawArticleID := paramArticleID[0]
		if articleID, err2 := strconv.Atoi(rawArticleID); err2 == nil {
			rctx.ArticleID = articleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("articleID", rawArticleID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowArticleContext) OK(r *Article) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.article+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowArticleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateAuthenticationContext provides the authentication create action context.
type CreateAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateAuthenticationPayload
}

// NewCreateAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller create action.
func NewCreateAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createAuthenticationPayload is the authentication create action payload.
type createAuthenticationPayload struct {
	// address flag
	Email *bool `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// identification flag
	Identification *bool `form:"identification,omitempty" json:"identification,omitempty" xml:"identification,omitempty"`
	// phone flag
	Phone *bool `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createAuthenticationPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.Identification == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "identification"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "phone"))
	}
	return
}

// Publicize creates CreateAuthenticationPayload from createAuthenticationPayload
func (payload *createAuthenticationPayload) Publicize() *CreateAuthenticationPayload {
	var pub CreateAuthenticationPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Identification != nil {
		pub.Identification = *payload.Identification
	}
	if payload.Phone != nil {
		pub.Phone = *payload.Phone
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateAuthenticationPayload is the authentication create action payload.
type CreateAuthenticationPayload struct {
	// address flag
	Email bool `form:"email" json:"email" xml:"email"`
	// identification flag
	Identification bool `form:"identification" json:"identification" xml:"identification"`
	// phone flag
	Phone bool `form:"phone" json:"phone" xml:"phone"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateAuthenticationPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateAuthenticationContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateAuthenticationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteAuthenticationContext provides the authentication delete action context.
type DeleteAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller delete action.
func NewDeleteAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteAuthenticationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAuthenticationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAuthenticationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowAuthenticationContext provides the authentication show action context.
type ShowAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewShowAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller show action.
func NewShowAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAuthenticationContext) OK(r *Authentication) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authentication+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAuthenticationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateAuthenticationContext provides the authentication update action context.
type UpdateAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateAuthenticationPayload
}

// NewUpdateAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller update action.
func NewUpdateAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// updateAuthenticationPayload is the authentication update action payload.
type updateAuthenticationPayload struct {
	// address flag
	Email *bool `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// identification flag
	Identification *bool `form:"identification,omitempty" json:"identification,omitempty" xml:"identification,omitempty"`
	// phone flag
	Phone *bool `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateAuthenticationPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates UpdateAuthenticationPayload from updateAuthenticationPayload
func (payload *updateAuthenticationPayload) Publicize() *UpdateAuthenticationPayload {
	var pub UpdateAuthenticationPayload
	if payload.Email != nil {
		pub.Email = payload.Email
	}
	if payload.Identification != nil {
		pub.Identification = payload.Identification
	}
	if payload.Phone != nil {
		pub.Phone = payload.Phone
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// UpdateAuthenticationPayload is the authentication update action payload.
type UpdateAuthenticationPayload struct {
	// address flag
	Email *bool `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// identification flag
	Identification *bool `form:"identification,omitempty" json:"identification,omitempty" xml:"identification,omitempty"`
	// phone flag
	Phone *bool `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateAuthenticationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAuthenticationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAuthenticationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListCategoryContext provides the category list action context.
type ListCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the category controller list action.
func NewListCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCategoryContext) OK(r CategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowCategoryContext provides the category show action context.
type ShowCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
}

// NewShowCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the category controller show action.
func NewShowCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["categoryID"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("categoryID", rawCategoryID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCategoryContext) OK(r *Category) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateCommentContext provides the comment create action context.
type CreateCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCommentPayload
}

// NewCreateCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller create action.
func NewCreateCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCommentPayload is the comment create action payload.
type createCommentPayload struct {
	// item id
	ItemID *int `form:"item_id,omitempty" json:"item_id,omitempty" xml:"item_id,omitempty"`
	// comment_id or null
	ReplyTo *int `form:"reply_to,omitempty" json:"reply_to,omitempty" xml:"reply_to,omitempty"`
	// comment text
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// comment user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCommentPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "item_id"))
	}
	if payload.Text == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "text"))
	}
	if payload.ReplyTo == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "reply_to"))
	}
	return
}

// Publicize creates CreateCommentPayload from createCommentPayload
func (payload *createCommentPayload) Publicize() *CreateCommentPayload {
	var pub CreateCommentPayload
	if payload.ItemID != nil {
		pub.ItemID = *payload.ItemID
	}
	if payload.ReplyTo != nil {
		pub.ReplyTo = *payload.ReplyTo
	}
	if payload.Text != nil {
		pub.Text = *payload.Text
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateCommentPayload is the comment create action payload.
type CreateCommentPayload struct {
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// comment_id or null
	ReplyTo int `form:"reply_to" json:"reply_to" xml:"reply_to"`
	// comment text
	Text string `form:"text" json:"text" xml:"text"`
	// comment user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCommentPayload) Validate() (err error) {

	if payload.Text == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "text"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCommentContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCommentContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListCommentContext provides the comment list action context.
type ListCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller list action.
func NewListCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCommentContext) OK(r CommentCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment+json; type=collection")
	}
	if r == nil {
		r = CommentCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowCommentContext provides the comment show action context.
type ShowCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ItemID int
}

// NewShowCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller show action.
func NewShowCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramItemID := req.Params["itemID"]
	if len(paramItemID) > 0 {
		rawItemID := paramItemID[0]
		if itemID, err2 := strconv.Atoi(rawItemID); err2 == nil {
			rctx.ItemID = itemID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("itemID", rawItemID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCommentContext) OK(r *Comment) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCommentContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateItemContext provides the item create action context.
type CreateItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateItemPayload
}

// NewCreateItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller create action.
func NewCreateItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createItemPayload is the item create action payload.
type createItemPayload struct {
	// category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// compensation of item
	Compensation *int `form:"compensation,omitempty" json:"compensation,omitempty" xml:"compensation,omitempty"`
	// description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// item image 1
	Image1 *string `form:"image1,omitempty" json:"image1,omitempty" xml:"image1,omitempty"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// category ID
	PlaceID *int `form:"place_id,omitempty" json:"place_id,omitempty" xml:"place_id,omitempty"`
	// price of item
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createItemPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	if payload.Compensation == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "compensation"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_id"))
	}
	if payload.PlaceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "place_id"))
	}
	if payload.Image1 == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "image1"))
	}
	return
}

// Publicize creates CreateItemPayload from createItemPayload
func (payload *createItemPayload) Publicize() *CreateItemPayload {
	var pub CreateItemPayload
	if payload.CategoryID != nil {
		pub.CategoryID = *payload.CategoryID
	}
	if payload.Compensation != nil {
		pub.Compensation = *payload.Compensation
	}
	if payload.Description != nil {
		pub.Description = *payload.Description
	}
	if payload.Image1 != nil {
		pub.Image1 = *payload.Image1
	}
	if payload.Image2 != nil {
		pub.Image2 = payload.Image2
	}
	if payload.Image3 != nil {
		pub.Image3 = payload.Image3
	}
	if payload.Image4 != nil {
		pub.Image4 = payload.Image4
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.PlaceID != nil {
		pub.PlaceID = *payload.PlaceID
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateItemPayload is the item create action payload.
type CreateItemPayload struct {
	// category ID
	CategoryID int `form:"category_id" json:"category_id" xml:"category_id"`
	// compensation of item
	Compensation int `form:"compensation" json:"compensation" xml:"compensation"`
	// description of item
	Description string `form:"description" json:"description" xml:"description"`
	// item image 1
	Image1 string `form:"image1" json:"image1" xml:"image1"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
	// category ID
	PlaceID int `form:"place_id" json:"place_id" xml:"place_id"`
	// price of item
	Price int `form:"price" json:"price" xml:"price"`
	// user ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateItemPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}

	if payload.Image1 == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "image1"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateItemContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateItemContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteItemContext provides the item delete action context.
type DeleteItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ItemID int
}

// NewDeleteItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller delete action.
func NewDeleteItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramItemID := req.Params["itemID"]
	if len(paramItemID) > 0 {
		rawItemID := paramItemID[0]
		if itemID, err2 := strconv.Atoi(rawItemID); err2 == nil {
			rctx.ItemID = itemID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("itemID", rawItemID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteItemContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteItemContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteItemContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListItemContext provides the item list action context.
type ListItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller list action.
func NewListItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListItemContext) OK(r ItemCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.item+json; type=collection")
	}
	if r == nil {
		r = ItemCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowItemContext provides the item show action context.
type ShowItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ItemID int
}

// NewShowItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller show action.
func NewShowItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramItemID := req.Params["itemID"]
	if len(paramItemID) > 0 {
		rawItemID := paramItemID[0]
		if itemID, err2 := strconv.Atoi(rawItemID); err2 == nil {
			rctx.ItemID = itemID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("itemID", rawItemID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowItemContext) OK(r *Item) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.item+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowItemContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateItemContext provides the item update action context.
type UpdateItemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ItemID  int
	Payload *UpdateItemPayload
}

// NewUpdateItemContext parses the incoming request URL and body, performs validations and creates the
// context used by the item controller update action.
func NewUpdateItemContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateItemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateItemContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramItemID := req.Params["itemID"]
	if len(paramItemID) > 0 {
		rawItemID := paramItemID[0]
		if itemID, err2 := strconv.Atoi(rawItemID); err2 == nil {
			rctx.ItemID = itemID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("itemID", rawItemID, "integer"))
		}
	}
	return &rctx, err
}

// updateItemPayload is the item update action payload.
type updateItemPayload struct {
	// Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// compensation of item
	Compensation *int `form:"compensation,omitempty" json:"compensation,omitempty" xml:"compensation,omitempty"`
	// description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique item ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// item image 1
	Image1 *string `form:"image1,omitempty" json:"image1,omitempty" xml:"image1,omitempty"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Place ID
	PlaceID *int `form:"place_id,omitempty" json:"place_id,omitempty" xml:"place_id,omitempty"`
	// price of item
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateItemPayload) Validate() (err error) {
	if payload.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "id"))
	}
	return
}

// Publicize creates UpdateItemPayload from updateItemPayload
func (payload *updateItemPayload) Publicize() *UpdateItemPayload {
	var pub UpdateItemPayload
	if payload.CategoryID != nil {
		pub.CategoryID = payload.CategoryID
	}
	if payload.Compensation != nil {
		pub.Compensation = payload.Compensation
	}
	if payload.Description != nil {
		pub.Description = payload.Description
	}
	if payload.ID != nil {
		pub.ID = *payload.ID
	}
	if payload.Image1 != nil {
		pub.Image1 = payload.Image1
	}
	if payload.Image2 != nil {
		pub.Image2 = payload.Image2
	}
	if payload.Image3 != nil {
		pub.Image3 = payload.Image3
	}
	if payload.Image4 != nil {
		pub.Image4 = payload.Image4
	}
	if payload.Name != nil {
		pub.Name = payload.Name
	}
	if payload.PlaceID != nil {
		pub.PlaceID = payload.PlaceID
	}
	if payload.Price != nil {
		pub.Price = payload.Price
	}
	if payload.UserID != nil {
		pub.UserID = payload.UserID
	}
	return &pub
}

// UpdateItemPayload is the item update action payload.
type UpdateItemPayload struct {
	// Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// compensation of item
	Compensation *int `form:"compensation,omitempty" json:"compensation,omitempty" xml:"compensation,omitempty"`
	// description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique item ID
	ID int `form:"id" json:"id" xml:"id"`
	// item image 1
	Image1 *string `form:"image1,omitempty" json:"image1,omitempty" xml:"image1,omitempty"`
	// item image 2
	Image2 *string `form:"image2,omitempty" json:"image2,omitempty" xml:"image2,omitempty"`
	// item image 3
	Image3 *string `form:"image3,omitempty" json:"image3,omitempty" xml:"image3,omitempty"`
	// item image 4
	Image4 *string `form:"image4,omitempty" json:"image4,omitempty" xml:"image4,omitempty"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Place ID
	PlaceID *int `form:"place_id,omitempty" json:"place_id,omitempty" xml:"place_id,omitempty"`
	// price of item
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// user ID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateItemContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateItemContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateItemContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListLargecategoryContext provides the largecategory list action context.
type ListLargecategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListLargecategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the largecategory controller list action.
func NewListLargecategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListLargecategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListLargecategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListLargecategoryContext) OK(r LargecategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.largecategory+json; type=collection")
	}
	if r == nil {
		r = LargecategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowLargecategoryContext provides the largecategory show action context.
type ShowLargecategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LargecategoryID int
}

// NewShowLargecategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the largecategory controller show action.
func NewShowLargecategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowLargecategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowLargecategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLargecategoryID := req.Params["largecategoryID"]
	if len(paramLargecategoryID) > 0 {
		rawLargecategoryID := paramLargecategoryID[0]
		if largecategoryID, err2 := strconv.Atoi(rawLargecategoryID); err2 == nil {
			rctx.LargecategoryID = largecategoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("largecategoryID", rawLargecategoryID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowLargecategoryContext) OK(r *Largecategory) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.largecategory+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowLargecategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListMiddlecategoryContext provides the middlecategory list action context.
type ListMiddlecategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListMiddlecategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the middlecategory controller list action.
func NewListMiddlecategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMiddlecategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMiddlecategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMiddlecategoryContext) OK(r MiddlecategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.middlecategory+json; type=collection")
	}
	if r == nil {
		r = MiddlecategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowMiddlecategoryContext provides the middlecategory show action context.
type ShowMiddlecategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MiddlecategoryID int
}

// NewShowMiddlecategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the middlecategory controller show action.
func NewShowMiddlecategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMiddlecategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMiddlecategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMiddlecategoryID := req.Params["middlecategoryID"]
	if len(paramMiddlecategoryID) > 0 {
		rawMiddlecategoryID := paramMiddlecategoryID[0]
		if middlecategoryID, err2 := strconv.Atoi(rawMiddlecategoryID); err2 == nil {
			rctx.MiddlecategoryID = middlecategoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("middlecategoryID", rawMiddlecategoryID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMiddlecategoryContext) OK(r *Middlecategory) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.middlecategory+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMiddlecategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateOfferContext provides the offer create action context.
type CreateOfferContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateOfferPayload
}

// NewCreateOfferContext parses the incoming request URL and body, performs validations and creates the
// context used by the offer controller create action.
func NewCreateOfferContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateOfferContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateOfferContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createOfferPayload is the offer create action payload.
type createOfferPayload struct {
	// rental end at
	EndAt *time.Time `form:"end_at,omitempty" json:"end_at,omitempty" xml:"end_at,omitempty"`
	// item id
	ItemID *int `form:"item_id,omitempty" json:"item_id,omitempty" xml:"item_id,omitempty"`
	// item id
	OwnerID *int `form:"owner_id,omitempty" json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// offer price
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// rental start at
	StartAt *time.Time `form:"start_at,omitempty" json:"start_at,omitempty" xml:"start_at,omitempty"`
	// offer user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createOfferPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "item_id"))
	}
	if payload.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "price"))
	}
	if payload.StartAt == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "start_at"))
	}
	if payload.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "end_at"))
	}
	return
}

// Publicize creates CreateOfferPayload from createOfferPayload
func (payload *createOfferPayload) Publicize() *CreateOfferPayload {
	var pub CreateOfferPayload
	if payload.EndAt != nil {
		pub.EndAt = *payload.EndAt
	}
	if payload.ItemID != nil {
		pub.ItemID = *payload.ItemID
	}
	if payload.OwnerID != nil {
		pub.OwnerID = payload.OwnerID
	}
	if payload.Price != nil {
		pub.Price = *payload.Price
	}
	if payload.StartAt != nil {
		pub.StartAt = *payload.StartAt
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateOfferPayload is the offer create action payload.
type CreateOfferPayload struct {
	// rental end at
	EndAt time.Time `form:"end_at" json:"end_at" xml:"end_at"`
	// item id
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// item id
	OwnerID *int `form:"owner_id,omitempty" json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// offer price
	Price int `form:"price" json:"price" xml:"price"`
	// rental start at
	StartAt time.Time `form:"start_at" json:"start_at" xml:"start_at"`
	// offer user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateOfferPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateOfferContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateOfferContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowOfferContext provides the offer show action context.
type ShowOfferContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OwnerID int
}

// NewShowOfferContext parses the incoming request URL and body, performs validations and creates the
// context used by the offer controller show action.
func NewShowOfferContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowOfferContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowOfferContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOwnerID := req.Params["ownerID"]
	if len(paramOwnerID) > 0 {
		rawOwnerID := paramOwnerID[0]
		if ownerID, err2 := strconv.Atoi(rawOwnerID); err2 == nil {
			rctx.OwnerID = ownerID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ownerID", rawOwnerID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowOfferContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowOfferContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateProfileContext provides the profile create action context.
type CreateProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateProfilePayload
}

// NewCreateProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller create action.
func NewCreateProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createProfilePayload is the profile create action payload.
type createProfilePayload struct {
	// address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// avatar image url
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// cover image url
	CoverImage *string `form:"cover_image,omitempty" json:"cover_image,omitempty" xml:"cover_image,omitempty"`
	// user introduciton
	Introduction *string `form:"introduction,omitempty" json:"introduction,omitempty" xml:"introduction,omitempty"`
	// phone number
	Phone *int `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createProfilePayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.Introduction == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "introduction"))
	}
	if payload.Address == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if payload.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "phone"))
	}
	if payload.AvatarImage == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "avatar_image"))
	}
	if payload.CoverImage == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "cover_image"))
	}
	return
}

// Publicize creates CreateProfilePayload from createProfilePayload
func (payload *createProfilePayload) Publicize() *CreateProfilePayload {
	var pub CreateProfilePayload
	if payload.Address != nil {
		pub.Address = *payload.Address
	}
	if payload.AvatarImage != nil {
		pub.AvatarImage = *payload.AvatarImage
	}
	if payload.CoverImage != nil {
		pub.CoverImage = *payload.CoverImage
	}
	if payload.Introduction != nil {
		pub.Introduction = *payload.Introduction
	}
	if payload.Phone != nil {
		pub.Phone = *payload.Phone
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// CreateProfilePayload is the profile create action payload.
type CreateProfilePayload struct {
	// address
	Address string `form:"address" json:"address" xml:"address"`
	// avatar image url
	AvatarImage string `form:"avatar_image" json:"avatar_image" xml:"avatar_image"`
	// cover image url
	CoverImage string `form:"cover_image" json:"cover_image" xml:"cover_image"`
	// user introduciton
	Introduction string `form:"introduction" json:"introduction" xml:"introduction"`
	// phone number
	Phone int `form:"phone" json:"phone" xml:"phone"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateProfilePayload) Validate() (err error) {

	if payload.Introduction == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "introduction"))
	}
	if payload.Address == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}

	if payload.AvatarImage == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "avatar_image"))
	}
	if payload.CoverImage == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "cover_image"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateProfileContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteProfileContext provides the profile delete action context.
type DeleteProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller delete action.
func NewDeleteProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteProfileContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowProfileContext provides the profile show action context.
type ShowProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewShowProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller show action.
func NewShowProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowProfileContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateProfileContext provides the profile update action context.
type UpdateProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateProfilePayload
}

// NewUpdateProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller update action.
func NewUpdateProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// updateProfilePayload is the profile update action payload.
type updateProfilePayload struct {
	// address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// avatar image url
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// cover image url
	CoverImage *string `form:"cover_image,omitempty" json:"cover_image,omitempty" xml:"cover_image,omitempty"`
	// user introduciton
	Introduction *string `form:"introduction,omitempty" json:"introduction,omitempty" xml:"introduction,omitempty"`
	// phone number
	Phone *int `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateProfilePayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates UpdateProfilePayload from updateProfilePayload
func (payload *updateProfilePayload) Publicize() *UpdateProfilePayload {
	var pub UpdateProfilePayload
	if payload.Address != nil {
		pub.Address = payload.Address
	}
	if payload.AvatarImage != nil {
		pub.AvatarImage = payload.AvatarImage
	}
	if payload.CoverImage != nil {
		pub.CoverImage = payload.CoverImage
	}
	if payload.Introduction != nil {
		pub.Introduction = payload.Introduction
	}
	if payload.Phone != nil {
		pub.Phone = payload.Phone
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// UpdateProfilePayload is the profile update action payload.
type UpdateProfilePayload struct {
	// address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// avatar image url
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// cover image url
	CoverImage *string `form:"cover_image,omitempty" json:"cover_image,omitempty" xml:"cover_image,omitempty"`
	// user introduciton
	Introduction *string `form:"introduction,omitempty" json:"introduction,omitempty" xml:"introduction,omitempty"`
	// phone number
	Phone *int `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateProfileContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProfileContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createUserPayload is the user create action payload.
type createUserPayload struct {
	// email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// last_name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserPayload) Validate() (err error) {
	if payload.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates CreateUserPayload from createUserPayload
func (payload *createUserPayload) Publicize() *CreateUserPayload {
	var pub CreateUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.FirstName != nil {
		pub.FirstName = *payload.FirstName
	}
	if payload.LastName != nil {
		pub.LastName = *payload.LastName
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// CreateUserPayload is the user create action payload.
type CreateUserPayload struct {
	// email
	Email string `form:"email" json:"email" xml:"email"`
	// first name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// last_name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// password
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserPayload) Validate() (err error) {
	if payload.FirstName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "first_name"))
	}
	if payload.LastName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "last_name"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUserContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteUserContext provides the user delete action context.
type DeleteUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller delete action.
func NewDeleteUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// updateUserPayload is the user update action payload.
type updateUserPayload struct {
	// email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Unique user ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// last_name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUserPayload) Validate() (err error) {
	if payload.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "id"))
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (payload *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if payload.Email != nil {
		pub.Email = payload.Email
	}
	if payload.FirstName != nil {
		pub.FirstName = payload.FirstName
	}
	if payload.ID != nil {
		pub.ID = *payload.ID
	}
	if payload.LastName != nil {
		pub.LastName = payload.LastName
	}
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	return &pub
}

// UpdateUserPayload is the user update action payload.
type UpdateUserPayload struct {
	// email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Unique user ID
	ID int `form:"id" json:"id" xml:"id"`
	// last_name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
