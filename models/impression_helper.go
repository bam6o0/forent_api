// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListImpression returns an array of view: default.
func (m *ImpressionDB) ListImpression(ctx context.Context, itemID int, userID int) []*app.Impression {
	defer goa.MeasureSince([]string{"goa", "db", "impression", "listimpression"}, time.Now())

	var native []*Impression
	var objs []*app.Impression
	err := m.Db.Scopes(ImpressionFilterByItem(itemID, m.Db), ImpressionFilterByUser(userID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Impression", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ImpressionToImpression())
	}

	return objs
}

// ImpressionToImpression loads a Impression and builds the default view of media type Impression.
func (m *Impression) ImpressionToImpression() *app.Impression {
	impression := &app.Impression{}
	impression.ID = m.ID
	impression.Score = m.Score
	impression.Text = m.Text

	return impression
}

// OneImpression loads a Impression and builds the default view of media type Impression.
func (m *ImpressionDB) OneImpression(ctx context.Context, id int, itemID int, userID int) (*app.Impression, error) {
	defer goa.MeasureSince([]string{"goa", "db", "impression", "oneimpression"}, time.Now())

	var native Impression
	err := m.Db.Scopes(ImpressionFilterByItem(itemID, m.Db), ImpressionFilterByUser(userID, m.Db)).Table(m.TableName()).Preload("Item").Preload("User").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Impression", "error", err.Error())
		return nil, err
	}

	view := *native.ImpressionToImpression()
	return &view, err
}
