// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListAuthentication returns an array of view: default.
func (m *AuthenticationDB) ListAuthentication(ctx context.Context) []*app.Authentication {
	defer goa.MeasureSince([]string{"goa", "db", "authentication", "listauthentication"}, time.Now())

	var native []*Authentication
	var objs []*app.Authentication
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Authentication", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.AuthenticationToAuthentication())
	}

	return objs
}

// AuthenticationToAuthentication loads a Authentication and builds the default view of media type Authentication.
func (m *Authentication) AuthenticationToAuthentication() *app.Authentication {
	authentication := &app.Authentication{}
	authentication.Email = m.Email
	authentication.ID = m.ID
	authentication.Identification = m.Identification
	authentication.Phone = m.Phone

	return authentication
}

// OneAuthentication loads a Authentication and builds the default view of media type Authentication.
func (m *AuthenticationDB) OneAuthentication(ctx context.Context, id int) (*app.Authentication, error) {
	defer goa.MeasureSince([]string{"goa", "db", "authentication", "oneauthentication"}, time.Now())

	var native Authentication
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Authentication", "error", err.Error())
		return nil, err
	}

	view := *native.AuthenticationToAuthentication()
	return &view, err
}
