// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListItem returns an array of view: default.
func (m *ItemDB) ListItem(ctx context.Context, categoryID int, placeID int, userID int) []*app.Item {
	defer goa.MeasureSince([]string{"goa", "db", "item", "listitem"}, time.Now())

	var native []*Item
	var objs []*app.Item
	err := m.Db.Scopes(ItemFilterByCategory(categoryID, m.Db), ItemFilterByPlace(placeID, m.Db), ItemFilterByUser(userID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Item", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ItemToItem())
	}

	return objs
}

// ItemToItem loads a Item and builds the default view of media type Item.
func (m *Item) ItemToItem() *app.Item {
	item := &app.Item{}
	item.CategoryID = m.CategoryID
	item.Compensation = m.Compensation
	item.Description = m.Description
	item.ID = m.ID
	item.Image1 = m.Image1
	item.Image2 = m.Image2
	item.Image3 = m.Image3
	item.Image4 = m.Image4
	item.Name = m.Name
	item.PlaceID = m.PlaceID
	item.Price = m.Price
	item.UserID = m.UserID

	return item
}

// OneItem loads a Item and builds the default view of media type Item.
func (m *ItemDB) OneItem(ctx context.Context, id int, categoryID int, placeID int, userID int) (*app.Item, error) {
	defer goa.MeasureSince([]string{"goa", "db", "item", "oneitem"}, time.Now())

	var native Item
	err := m.Db.Scopes(ItemFilterByCategory(categoryID, m.Db), ItemFilterByPlace(placeID, m.Db), ItemFilterByUser(userID, m.Db)).Table(m.TableName()).Preload("Category").Preload("Place").Preload("User").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Item", "error", err.Error())
		return nil, err
	}

	view := *native.ItemToItem()
	return &view, err
}
