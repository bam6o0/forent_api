// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Models
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// Review Model
type Review struct {
	ID        int `gorm:"primary_key"` // This is the review Model PK field
	Image     string
	ItemID    int // Belongs To Item
	Score     int
	Text      string
	UserID    int        // has many Review
	CreatedAt time.Time  // timestamp
	DeletedAt *time.Time // nullable timestamp (soft delete)
	UpdatedAt time.Time  // timestamp
	Item      Item
	User      User
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Review) TableName() string {
	return "reviews"

}

// ReviewDB is the implementation of the storage interface for
// Review.
type ReviewDB struct {
	Db *gorm.DB
}

// NewReviewDB creates a new storage type.
func NewReviewDB(db *gorm.DB) *ReviewDB {
	return &ReviewDB{Db: db}
}

// DB returns the underlying database.
func (m *ReviewDB) DB() interface{} {
	return m.Db
}

// ReviewStorage represents the storage interface.
type ReviewStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Review, error)
	Get(ctx context.Context, id int) (*Review, error)
	Add(ctx context.Context, review *Review) error
	Update(ctx context.Context, review *Review) error
	Delete(ctx context.Context, id int) error

	ListReview(ctx context.Context, itemID int, userID int) []*app.Review
	OneReview(ctx context.Context, id int, itemID int, userID int) (*app.Review, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ReviewDB) TableName() string {
	return "reviews"

}

// Belongs To Relationships

// ReviewFilterByItem is a gorm filter for a Belongs To relationship.
func ReviewFilterByItem(itemID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if itemID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("item_id = ?", itemID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// ReviewFilterByUser is a gorm filter for a Belongs To relationship.
func ReviewFilterByUser(userID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if userID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("user_id = ?", userID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single Review as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ReviewDB) Get(ctx context.Context, id int) (*Review, error) {
	defer goa.MeasureSince([]string{"goa", "db", "review", "get"}, time.Now())

	var native Review
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Review
func (m *ReviewDB) List(ctx context.Context) ([]*Review, error) {
	defer goa.MeasureSince([]string{"goa", "db", "review", "list"}, time.Now())

	var objs []*Review
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ReviewDB) Add(ctx context.Context, model *Review) error {
	defer goa.MeasureSince([]string{"goa", "db", "review", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Review", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ReviewDB) Update(ctx context.Context, model *Review) error {
	defer goa.MeasureSince([]string{"goa", "db", "review", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Review", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ReviewDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "review", "delete"}, time.Now())

	var obj Review

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Review", "error", err.Error())
		return err
	}

	return nil
}
