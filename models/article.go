// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Models
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// Article Model
type Article struct {
	ID              int `gorm:"primary_key"` // This is the article Model PK field
	Body1           string
	Body2           string
	Body3           string
	Body4           string
	Body5           string
	CategoryID      int // has many Article
	Image1          string
	Image2          string
	Image3          string
	Image4          string
	Image5          string
	Introduction    string
	ItemDescription string
	ItemID          int // has many Article
	Title1          string
	Title2          string
	Title3          string
	Title4          string
	Title5          string
	UserID          int        // Belongs To User
	CreatedAt       time.Time  // timestamp
	DeletedAt       *time.Time // nullable timestamp (soft delete)
	UpdatedAt       time.Time  // timestamp
	Category        Category
	Item            Item
	User            User
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Article) TableName() string {
	return "articles"

}

// ArticleDB is the implementation of the storage interface for
// Article.
type ArticleDB struct {
	Db *gorm.DB
}

// NewArticleDB creates a new storage type.
func NewArticleDB(db *gorm.DB) *ArticleDB {
	return &ArticleDB{Db: db}
}

// DB returns the underlying database.
func (m *ArticleDB) DB() interface{} {
	return m.Db
}

// ArticleStorage represents the storage interface.
type ArticleStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Article, error)
	Get(ctx context.Context, id int) (*Article, error)
	Add(ctx context.Context, article *Article) error
	Update(ctx context.Context, article *Article) error
	Delete(ctx context.Context, id int) error

	ListArticle(ctx context.Context, categoryID int, itemID int, userID int) []*app.Article
	OneArticle(ctx context.Context, id int, categoryID int, itemID int, userID int) (*app.Article, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ArticleDB) TableName() string {
	return "articles"

}

// Belongs To Relationships

// ArticleFilterByCategory is a gorm filter for a Belongs To relationship.
func ArticleFilterByCategory(categoryID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if categoryID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("category_id = ?", categoryID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// ArticleFilterByItem is a gorm filter for a Belongs To relationship.
func ArticleFilterByItem(itemID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if itemID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("item_id = ?", itemID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// ArticleFilterByUser is a gorm filter for a Belongs To relationship.
func ArticleFilterByUser(userID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if userID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("user_id = ?", userID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single Article as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ArticleDB) Get(ctx context.Context, id int) (*Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "get"}, time.Now())

	var native Article
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Article
func (m *ArticleDB) List(ctx context.Context) ([]*Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "list"}, time.Now())

	var objs []*Article
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ArticleDB) Add(ctx context.Context, model *Article) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Article", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ArticleDB) Update(ctx context.Context, model *Article) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Article", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ArticleDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "delete"}, time.Now())

	var obj Article

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Article", "error", err.Error())
		return err
	}

	return nil
}
