// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListComment returns an array of view: default.
func (m *CommentDB) ListComment(ctx context.Context, itemID int, userID int) []*app.Comment {
	defer goa.MeasureSince([]string{"goa", "db", "comment", "listcomment"}, time.Now())

	var native []*Comment
	var objs []*app.Comment
	err := m.Db.Scopes(CommentFilterByItem(itemID, m.Db), CommentFilterByUser(userID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Comment", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.CommentToComment())
	}

	return objs
}

// CommentToComment loads a Comment and builds the default view of media type Comment.
func (m *Comment) CommentToComment() *app.Comment {
	comment := &app.Comment{}
	comment.ID = m.ID
	comment.ItemID = m.ItemID
	comment.ReplyTo = m.ReplyTo
	comment.Text = m.Text
	comment.UserID = m.UserID

	return comment
}

// OneComment loads a Comment and builds the default view of media type Comment.
func (m *CommentDB) OneComment(ctx context.Context, id int, itemID int, userID int) (*app.Comment, error) {
	defer goa.MeasureSince([]string{"goa", "db", "comment", "onecomment"}, time.Now())

	var native Comment
	err := m.Db.Scopes(CommentFilterByItem(itemID, m.Db), CommentFilterByUser(userID, m.Db)).Table(m.TableName()).Preload("Item").Preload("User").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Comment", "error", err.Error())
		return nil, err
	}

	view := *native.CommentToComment()
	return &view, err
}
