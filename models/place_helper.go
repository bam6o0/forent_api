// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListPlace returns an array of view: default.
func (m *PlaceDB) ListPlace(ctx context.Context) []*app.Place {
	defer goa.MeasureSince([]string{"goa", "db", "place", "listplace"}, time.Now())

	var native []*Place
	var objs []*app.Place
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Place", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.PlaceToPlace())
	}

	return objs
}

// PlaceToPlace loads a Place and builds the default view of media type Place.
func (m *Place) PlaceToPlace() *app.Place {
	place := &app.Place{}
	place.GooglePlaceID = m.GooglePlaceID
	place.ID = m.ID
	place.Latitude = m.Latitude
	place.Longitude = m.Longitude
	place.Name = m.Name
	place.Type = m.Type

	return place
}

// OnePlace loads a Place and builds the default view of media type Place.
func (m *PlaceDB) OnePlace(ctx context.Context, id int) (*app.Place, error) {
	defer goa.MeasureSince([]string{"goa", "db", "place", "oneplace"}, time.Now())

	var native Place
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Place", "error", err.Error())
		return nil, err
	}

	view := *native.PlaceToPlace()
	return &view, err
}
