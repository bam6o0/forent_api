// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Models
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// Item Model
type Item struct {
	ID           int       `gorm:"primary_key"` // This is the item Model PK field
	Articles     []Article // has many Articles
	CategoryID   int       // Belongs To Category
	Comments     []Comment // has many Comments
	Compensation int
	Description  string
	Image1       string
	Image2       string
	Image3       string
	Image4       string
	Name         string
	Offers       []Offer // has many Offers
	PlaceID      int     // has one Item
	Price        int
	Reviews      []Review   // has many Reviews
	UserID       int        // has many Item
	CreatedAt    time.Time  // timestamp
	DeletedAt    *time.Time // nullable timestamp (soft delete)
	UpdatedAt    time.Time  // timestamp
	Category     Category
	Place        Place
	User         User
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Item) TableName() string {
	return "items"

}

// ItemDB is the implementation of the storage interface for
// Item.
type ItemDB struct {
	Db *gorm.DB
}

// NewItemDB creates a new storage type.
func NewItemDB(db *gorm.DB) *ItemDB {
	return &ItemDB{Db: db}
}

// DB returns the underlying database.
func (m *ItemDB) DB() interface{} {
	return m.Db
}

// ItemStorage represents the storage interface.
type ItemStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Item, error)
	Get(ctx context.Context, id int) (*Item, error)
	Add(ctx context.Context, item *Item) error
	Update(ctx context.Context, item *Item) error
	Delete(ctx context.Context, id int) error

	ListItem(ctx context.Context, categoryID int, placeID int, userID int) []*app.Item
	OneItem(ctx context.Context, id int, categoryID int, placeID int, userID int) (*app.Item, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ItemDB) TableName() string {
	return "items"

}

// Belongs To Relationships

// ItemFilterByCategory is a gorm filter for a Belongs To relationship.
func ItemFilterByCategory(categoryID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if categoryID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("category_id = ?", categoryID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// ItemFilterByPlace is a gorm filter for a Belongs To relationship.
func ItemFilterByPlace(placeID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if placeID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("place_id = ?", placeID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// ItemFilterByUser is a gorm filter for a Belongs To relationship.
func ItemFilterByUser(userID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if userID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("user_id = ?", userID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single Item as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ItemDB) Get(ctx context.Context, id int) (*Item, error) {
	defer goa.MeasureSince([]string{"goa", "db", "item", "get"}, time.Now())

	var native Item
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Item
func (m *ItemDB) List(ctx context.Context) ([]*Item, error) {
	defer goa.MeasureSince([]string{"goa", "db", "item", "list"}, time.Now())

	var objs []*Item
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ItemDB) Add(ctx context.Context, model *Item) error {
	defer goa.MeasureSince([]string{"goa", "db", "item", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Item", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ItemDB) Update(ctx context.Context, model *Item) error {
	defer goa.MeasureSince([]string{"goa", "db", "item", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Item", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ItemDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "item", "delete"}, time.Now())

	var obj Item

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Item", "error", err.Error())
		return err
	}

	return nil
}
