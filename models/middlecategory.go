// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Models
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MiddleCategory Model
type MiddleCategory struct {
	ID              int `gorm:"primary_key"` // This is the  middle category Model PK field
	LargeCategoryID int // Belongs To LargeCategory
	Name            string
	NameBase        string
	NameEn          string
	CreatedAt       time.Time  // timestamp
	DeletedAt       *time.Time // nullable timestamp (soft delete)
	UpdatedAt       time.Time  // timestamp
	LargeCategory   LargeCategory
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m MiddleCategory) TableName() string {
	return "middle_categories"

}

// MiddleCategoryDB is the implementation of the storage interface for
// MiddleCategory.
type MiddleCategoryDB struct {
	Db *gorm.DB
}

// NewMiddleCategoryDB creates a new storage type.
func NewMiddleCategoryDB(db *gorm.DB) *MiddleCategoryDB {
	return &MiddleCategoryDB{Db: db}
}

// DB returns the underlying database.
func (m *MiddleCategoryDB) DB() interface{} {
	return m.Db
}

// MiddleCategoryStorage represents the storage interface.
type MiddleCategoryStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*MiddleCategory, error)
	Get(ctx context.Context, id int) (*MiddleCategory, error)
	Add(ctx context.Context, middlecategory *MiddleCategory) error
	Update(ctx context.Context, middlecategory *MiddleCategory) error
	Delete(ctx context.Context, id int) error

	ListMiddlecategory(ctx context.Context, largeCategoryID int) []*app.Middlecategory
	OneMiddlecategory(ctx context.Context, id int, largeCategoryID int) (*app.Middlecategory, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *MiddleCategoryDB) TableName() string {
	return "middle_categories"

}

// Belongs To Relationships

// MiddleCategoryFilterByLargeCategory is a gorm filter for a Belongs To relationship.
func MiddleCategoryFilterByLargeCategory(largeCategoryID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if largeCategoryID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("large_category_id = ?", largeCategoryID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single MiddleCategory as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *MiddleCategoryDB) Get(ctx context.Context, id int) (*MiddleCategory, error) {
	defer goa.MeasureSince([]string{"goa", "db", "middleCategory", "get"}, time.Now())

	var native MiddleCategory
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of MiddleCategory
func (m *MiddleCategoryDB) List(ctx context.Context) ([]*MiddleCategory, error) {
	defer goa.MeasureSince([]string{"goa", "db", "middleCategory", "list"}, time.Now())

	var objs []*MiddleCategory
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *MiddleCategoryDB) Add(ctx context.Context, model *MiddleCategory) error {
	defer goa.MeasureSince([]string{"goa", "db", "middleCategory", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding MiddleCategory", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *MiddleCategoryDB) Update(ctx context.Context, model *MiddleCategory) error {
	defer goa.MeasureSince([]string{"goa", "db", "middleCategory", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating MiddleCategory", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *MiddleCategoryDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "middleCategory", "delete"}, time.Now())

	var obj MiddleCategory

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting MiddleCategory", "error", err.Error())
		return err
	}

	return nil
}
