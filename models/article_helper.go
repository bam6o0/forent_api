// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListArticle returns an array of view: default.
func (m *ArticleDB) ListArticle(ctx context.Context, categoryID int, itemID int, userID int) []*app.Article {
	defer goa.MeasureSince([]string{"goa", "db", "article", "listarticle"}, time.Now())

	var native []*Article
	var objs []*app.Article
	err := m.Db.Scopes(ArticleFilterByCategory(categoryID, m.Db), ArticleFilterByItem(itemID, m.Db), ArticleFilterByUser(userID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Article", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ArticleToArticle())
	}

	return objs
}

// ArticleToArticle loads a Article and builds the default view of media type Article.
func (m *Article) ArticleToArticle() *app.Article {
	article := &app.Article{}
	article.Body1 = m.Body1
	article.Body2 = m.Body2
	article.Body3 = m.Body3
	article.Body4 = m.Body4
	article.Body5 = m.Body5
	article.CategoryID = m.CategoryID
	article.ID = m.ID
	article.Image1 = m.Image1
	article.Image2 = m.Image2
	article.Image3 = m.Image3
	article.Image4 = m.Image4
	article.Image5 = m.Image5
	article.Introduction = m.Introduction
	article.ItemDescription = m.ItemDescription
	article.ItemID = m.ItemID
	article.Title1 = m.Title1
	article.Title2 = m.Title2
	article.Title3 = m.Title3
	article.Title4 = m.Title4
	article.Title5 = m.Title5
	article.UserID = m.UserID

	return article
}

// OneArticle loads a Article and builds the default view of media type Article.
func (m *ArticleDB) OneArticle(ctx context.Context, id int, categoryID int, itemID int, userID int) (*app.Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "onearticle"}, time.Now())

	var native Article
	err := m.Db.Scopes(ArticleFilterByCategory(categoryID, m.Db), ArticleFilterByItem(itemID, m.Db), ArticleFilterByUser(userID, m.Db)).Table(m.TableName()).Preload("Category").Preload("Item").Preload("User").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Article", "error", err.Error())
		return nil, err
	}

	view := *native.ArticleToArticle()
	return &view, err
}
