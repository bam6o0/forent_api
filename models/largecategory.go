// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Models
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// LargeCategory Model
type LargeCategory struct {
	ID              int              `gorm:"primary_key"` // This is the large category Model PK field
	MiddleCategorys []MiddleCategory // has many MiddleCategories
	Name            string
	NameBase        string
	NameEn          string
	CreatedAt       time.Time  // timestamp
	DeletedAt       *time.Time // nullable timestamp (soft delete)
	UpdatedAt       time.Time  // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m LargeCategory) TableName() string {
	return "large_categories"

}

// LargeCategoryDB is the implementation of the storage interface for
// LargeCategory.
type LargeCategoryDB struct {
	Db *gorm.DB
}

// NewLargeCategoryDB creates a new storage type.
func NewLargeCategoryDB(db *gorm.DB) *LargeCategoryDB {
	return &LargeCategoryDB{Db: db}
}

// DB returns the underlying database.
func (m *LargeCategoryDB) DB() interface{} {
	return m.Db
}

// LargeCategoryStorage represents the storage interface.
type LargeCategoryStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*LargeCategory, error)
	Get(ctx context.Context, id int) (*LargeCategory, error)
	Add(ctx context.Context, largecategory *LargeCategory) error
	Update(ctx context.Context, largecategory *LargeCategory) error
	Delete(ctx context.Context, id int) error

	ListLargecategory(ctx context.Context) []*app.Largecategory
	OneLargecategory(ctx context.Context, id int) (*app.Largecategory, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *LargeCategoryDB) TableName() string {
	return "large_categories"

}

// CRUD Functions

// Get returns a single LargeCategory as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *LargeCategoryDB) Get(ctx context.Context, id int) (*LargeCategory, error) {
	defer goa.MeasureSince([]string{"goa", "db", "largeCategory", "get"}, time.Now())

	var native LargeCategory
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of LargeCategory
func (m *LargeCategoryDB) List(ctx context.Context) ([]*LargeCategory, error) {
	defer goa.MeasureSince([]string{"goa", "db", "largeCategory", "list"}, time.Now())

	var objs []*LargeCategory
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *LargeCategoryDB) Add(ctx context.Context, model *LargeCategory) error {
	defer goa.MeasureSince([]string{"goa", "db", "largeCategory", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding LargeCategory", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *LargeCategoryDB) Update(ctx context.Context, model *LargeCategory) error {
	defer goa.MeasureSince([]string{"goa", "db", "largeCategory", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating LargeCategory", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *LargeCategoryDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "largeCategory", "delete"}, time.Now())

	var obj LargeCategory

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting LargeCategory", "error", err.Error())
		return err
	}

	return nil
}
