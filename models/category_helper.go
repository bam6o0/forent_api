// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "forent": Model Helpers
//
// Command:
// $ goagen
// --design=forent_api/design
// --out=$(GOPATH)/src/forent_api
// --version=v1.3.1

package models

import (
	"context"
	"forent_api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListCategory returns an array of view: default.
func (m *CategoryDB) ListCategory(ctx context.Context, middleCategoryID int) []*app.Category {
	defer goa.MeasureSince([]string{"goa", "db", "category", "listcategory"}, time.Now())

	var native []*Category
	var objs []*app.Category
	err := m.Db.Scopes(CategoryFilterByMiddleCategory(middleCategoryID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Category", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.CategoryToCategory())
	}

	return objs
}

// CategoryToCategory loads a Category and builds the default view of media type Category.
func (m *Category) CategoryToCategory() *app.Category {
	category := &app.Category{}
	category.ID = m.ID
	category.MiddleCategoryID = m.MiddleCategoryID
	category.Name = m.Name
	category.NameBase = m.NameBase
	category.NameEn = m.NameEn

	return category
}

// OneCategory loads a Category and builds the default view of media type Category.
func (m *CategoryDB) OneCategory(ctx context.Context, id int, middleCategoryID int) (*app.Category, error) {
	defer goa.MeasureSince([]string{"goa", "db", "category", "onecategory"}, time.Now())

	var native Category
	err := m.Db.Scopes(CategoryFilterByMiddleCategory(middleCategoryID, m.Db)).Table(m.TableName()).Preload("MiddleCategory").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Category", "error", err.Error())
		return nil, err
	}

	view := *native.CategoryToCategory()
	return &view, err
}
